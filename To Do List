import React, { useState } from 'react';

function ToDoList({ initialTasks = [], title = 'To Do List' }) {
  const [tasks, setTasks] = useState(initialTasks);
  const [taskName, setTaskName] = useState('');
  const [taskDescription, setTaskDescription] = useState('');
  const [taskDate, setTaskDate] = useState('');
  const [editIndex, setEditIndex] = useState(null);

  const styles = {
    container: {
      maxWidth: '400px',
      margin: '0 auto',
      textAlign: 'center',
      padding: '20px',
      fontFamily: 'Arial, sans-serif',
    },
    input: {
      width: '100%',
      padding: '10px',
      margin: '10px 0',
      borderRadius: '4px',
      border: '1px solid #ddd',
    },
    button: {
      width: '100%',
      padding: '10px',
      margin: '10px 0',
      borderRadius: '4px',
      border: 'none',
      backgroundColor: '#ddd',
      cursor: 'pointer',
      fontWeight: 'bold',
    },
    taskItem: (completed) => ({
      textDecoration: completed ? 'line-through' : 'none',
      color: completed ? 'red' : 'black',
      borderBottom: '1px solid #ddd',
      padding: '10px 0',
    }),
    completedCount: {
      marginTop: '20px',
      fontWeight: 'bold',
    },
  };

  const handleAddTask = () => {
    if (!taskName || !taskDescription || !taskDate) return;

    const newTask = {
      name: taskName,
      description: taskDescription,
      completed: false,
      date: taskDate,
    };

    if (editIndex !== null) {
      const updatedTasks = [...tasks];
      updatedTasks[editIndex] = newTask;
      setTasks(updatedTasks);
      setEditIndex(null);
    } else {
      setTasks([...tasks, newTask]);
    }

    setTaskName('');
    setTaskDescription('');
    setTaskDate('');
  };

  const handleEditTask = (index) => {
    setTaskName(tasks[index].name);
    setTaskDescription(tasks[index].description);
    setTaskDate(tasks[index].date);
    setEditIndex(index);
  };

  const handleDeleteTask = (index) => {
    setTasks(tasks.filter((_, i) => i !== index));
  };

  const toggleCompleteTask = (index) => {
    const updatedTasks = [...tasks];
    updatedTasks[index].completed = !updatedTasks[index].completed;
    setTasks(updatedTasks);
  };

  const completedTasksCount = tasks.filter(task => task.completed).length;

  return (
    <div style={styles.container}>
      <h1>{title}</h1>

      <div>
        <input
          type="text"
          placeholder="Task Name"
          value={taskName}
          onChange={(e) => setTaskName(e.target.value)}
          style={styles.input}
        />
        <textarea
          placeholder="Task Description"
          value={taskDescription}
          onChange={(e) => setTaskDescription(e.target.value)}
          style={styles.input}
        ></textarea>
        <input
          type="datetime-local"
          value={taskDate}
          onChange={(e) => setTaskDate(e.target.value)}
          style={styles.input}
        />
        <button onClick={handleAddTask} style={styles.button}>
          {editIndex !== null ? 'Update Task' : 'Add Task'}
        </button>
      </div>

      <div>
        {tasks.map((task, index) => (
          <div key={index} style={styles.taskItem(task.completed)}>
            <h2>{task.name}</h2>
            <p>Description: {task.description}</p>
            <p>Scheduled for: {task.date}</p>
            <p>Status: {task.completed ? 'Completed' : 'Scheduled'}</p>
            <input
              type="checkbox"
              checked={task.completed}
              onChange={() => toggleCompleteTask(index)}
            />
            <button onClick={() => handleEditTask(index)} style={styles.button}>Edit</button>
            <button onClick={() => handleDeleteTask(index)} style={styles.button}>Delete</button>
          </div>
        ))}
      </div>

      <div style={styles.completedCount}>
        Total Completed Tasks: {completedTasksCount}
      </div>
    </div>
  );
}

function App() {
  const initialTasks = [
    {
      name: 'Team meeting at 3 PM',
      description: 'Discuss project progress with the team.',
      completed: false,
      date: new Date().toISOString().slice(0, 16),
    },
    {
      name: 'Organize files on computer',
      description: 'Sort through files and folders, delete unnecessary ones.',
      completed: false,
      date: new Date().toISOString().slice(0, 16),
    },
  ];

  return <ToDoList initialTasks={initialTasks} title="My Task List" />;
}

export default App;
